# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    image: mi-app-node:1.0  # Imagen personalizada de la app
    container_name: app1
    environment:
      NODE_ENV: production
      INSTANCE_ID: app1
    ports:
      - "3001:3000"  # Mapeamos el puerto 3001 en el host al puerto 3000 del contenedor
    depends_on:
      - redis  # Garantiza que Redis esté corriendo antes de levantar la app
    networks:
      - app-network

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    image: mi-app-node:1.0  # Usamos la misma imagen
    container_name: app2
    environment:
      NODE_ENV: production
      INSTANCE_ID: app2
    ports:
      - "3002:3000"  # Mapeamos el puerto 3002 en el host al puerto 3000 del contenedor
    depends_on:
      - redis
    networks:
      - app-network

  redis:
    image: redis/redis-stack
    container_name: server-redis
    ports:
      - "8001:6379"
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"  # Nginx escuchará en el puerto 80 del host
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Montamos el archivo de configuración de Nginx
    depends_on:
      - app1
      - app2
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Montamos el archivo de configuración de Prometheus
    ports:
      - "9090:9090"
    depends_on:
      - cadvisor
    networks:
      - app-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "4000:3000"
    volumes:
      - grafana_data:/var/lib/grafana  # Volumen persistente para datos de Grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # Usamos una red bridge para la comunicación

volumes:
  grafana_data:
    driver: local


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

# Código para hacer el docker compose de este archivo
# docker-compose -f compose.yaml up -d
