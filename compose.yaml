# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3'
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile  # Especificamos el Dockerfile si es necesario
    image: mi-app-node:1.0  # Definir el nombre y la etiqueta de la imagen para la app
    container_name: app-contenedor  # Nombre del contenedor de la app
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"  # Puerto de la app
    depends_on:
      - redis  # Garantiza que Redis esté corriendo antes de levantar el server
    networks:
      - app-network  # Usamos la misma red para que ambos servicios puedan comunicarse

  redis:
    image: redis/redis-stack  # Usar la imagen oficial de Redis Stack
    container_name: redis-todo  # Nombre del contenedor de Redis
    ports:
      - "8001:6379"  # Exponemos Redis en el puerto 8001 (mapeado al 6379 interno)
    networks:
      - app-network  # La misma red que el servicio app para que se puedan comunicar

networks:
  app-network:
    driver: bridge  # Definimos una red bridge para la comunicación entre servicios

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

